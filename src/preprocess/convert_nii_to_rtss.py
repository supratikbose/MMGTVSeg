import pydicom
from pydicom.dataset import Dataset, FileDataset
from pydicom.sequence import Sequence
from pydicom import uid
import datetime
import json
import numpy as np
#from convert_mask_to_contours import convert_mask_to_contours
from preprocess import convert_mask_to_contours

def convert_nii_to_rtss(dicom_dir, nii_fname, label_json_file, output_fname):
    print(dicom_dir)
    print(nii_fname)
    print(label_json_file)
    print(output_fname)
    # dicom_dir = 'input/HN002/'
    # nii_fname = 'input/HN002_labels.nii.gz'
    # label_json_file = 'input/hn.json' 
    # output_fname = 'input/HN002/ar_vnet_autoseg_rtss.dcm'
    # #rtss_fname = 'input/HN002_human_rtss.dcm'
    dicom_prefix = '1.2.826.0.1.3680043.8.498.'     # this is the default pydicom prefix (may need to change this to Varian prefix)

    # load model and data parameters from JSON config files
    with open(label_json_file) as f:
        label_pars = json.load(f)
        f.close()

    # convert .nii mask volume to contour points
    roi, uid_list, fnames_list = convert_mask_to_contours.convert_mask_to_contours(fname = nii_fname, dicom_dir = dicom_dir, label_pars = label_pars, display = False)

    # get current date and time
    dt = datetime.datetime.now()
    current_date = dt.strftime('%Y%m%d')
    current_time = dt.strftime('%H%M%S.%f')

    # create new RTSS dataset
    file_meta = Dataset()
    file_meta.MediaStorageSOPClassUID = '1.2.840.10008.5.1.4.1.1.481.3'    # this uid specifies that this is an RTSS DICOM file
    file_meta.MediaStorageSOPInstanceUID = uid.generate_uid(prefix=dicom_prefix)  
    file_meta.ImplementationClassUID = uid.generate_uid(prefix=dicom_prefix)

    # load one reference dcm file from input DICOM directory
    dcm = pydicom.dcmread(fnames_list[0])
    #ss_ref = pydicom.read_file(rtss_fname) 

    # define high-level RTSS attributes and tags
    rtss = FileDataset(output_fname, {}, file_meta=file_meta, preamble=b"\0" * 128, is_implicit_VR = True, is_little_endian = True)
    rtss.is_implicit_VR = True
    rtss.is_little_endian = True
    rtss.file_meta.TransferSyntaxUID = uid.ImplicitVRLittleEndian  # '1.2.840.10008.1.2'
    rtss.SOPClassUID = '1.2.840.10008.5.1.4.1.1.481.3'
    rtss.FrameOfReferenceUID = dcm.FrameOfReferenceUID
    rtss.SOPInstanceUID = uid.generate_uid(prefix=dicom_prefix)
    rtss.SeriesInstanceUID = uid.generate_uid(prefix=dicom_prefix)
    rtss.SpecificCharacterSet = 'ISO_IR 100'

    # define RTSS tags
    rtss.Modality = 'RTSTRUCT'
    rtss.Manufacturer = 'Varian Medical Systems'
    rtss.ManufacturerModelName = 'Applied Research V-Net'
    rtss.SeriesDescription = 'Automatic contours generated by AR V-Net model'
    rtss.SeriesNumber = '1'
    rtss.InstanceNumber = '1'
    rtss.SoftwareVersion = '0.1'
    rtss.ReviewerName = 'Doctor'
    rtss.OperatorsName = '' 
    rtss.AccessionNumber = '' 
    rtss.ApprovalStatus = 'UNAPPROVED'

    rtss.ContentDate = current_date
    rtss.ContentTime = current_time
    rtss.InstanceCreationDate = current_date
    rtss.InstanceCreationTime = current_time
    rtss.ReviewDate = current_date
    rtss.ReviewTime = current_time
    rtss.SeriesDate = current_date
    rtss.SeriesTime = current_time
    rtss.StructureSetDate = current_date
    rtss.StructureSetTime = current_time

    # copy tags from image
    rtss.StudyID = dcm.StudyID                      # image and RTSS study ID must be the same!
    rtss.StudyInstanceUID = dcm.StudyInstanceUID    # image and RTSS study instance UID must be the same!
    rtss.StudyDescription = dcm.StudyDescription
    rtss.StudyDate = current_date
    rtss.StudyTime = current_time
    rtss.InstitutionName = dcm.InstitutionName
    rtss.PatientAge = dcm.PatientAge
    rtss.PatientBirthDate = dcm.PatientBirthDate
    rtss.PatientName = dcm.PatientName
    rtss.PatientID = dcm.PatientID
    rtss.OtherPatientIDs = ''
    rtss.PatientSex = dcm.PatientSex
    rtss.ReferringPhysicianName = dcm.ReferringPhysicianName
    rtss.StructureSetDescription = 'AR V-Net Autoseg Structure Set'
    rtss.StructureSetLabel = 'AR_VNet_' + str(rtss.PatientName) + '_v' + rtss.SoftwareVersion
    rtss.StructureSetName = 'AR_VNet_Patient_' + rtss.PatientID

    # ------------------ ROIContourSequence START ------------------ 
    ref_dcm = Dataset()
    ref_dcm.ReferencedSOPClassUID = dcm.SOPClassUID

    roi_list = []
    for roi_num in range(1, label_pars['num_labels'] + 1):

        item_list = []
        for item_num in range(0,len(roi[roi_num-1])):
            item = Dataset()
            item.ContourNumber = str(item_num + 1)
            p = roi[roi_num-1][item_num].regions[0]

            if ((p.shape)[0] > 0):         
                item.ContourData = list(p.flatten())
                item.ContourGeometricType = 'CLOSED_PLANAR'
                item.NumberOfContourPoints = (p.shape)[0]
                ref_dcm.ReferencedSOPInstanceUID = roi[roi_num-1][item_num].uid
                item.ContourImageSequence = Sequence((ref_dcm,))
                item_list.append(item)
            else:
                print('Warning: Empty contour encountered in ROIContourSequence generation.')

        roi_item = Dataset()
        roi_item.ContourSequence = Sequence(item_list)
        roi_item.ROIDisplayColor = label_pars['label_colors'][str(roi_num)]
        roi_item.ReferencedROINumber = str(roi_num)
        roi_list.append(roi_item)

    rtss.ROIContourSequence = Sequence(roi_list)

    # ------------------ RTROIObservationSequence ------------------ 

    roi_list = []
    for roi_num in range(1, label_pars['num_labels'] + 1):

        obs = Dataset()
        obs.ObservationNumber = str(roi_num)
        obs.ROIInterpreter = ''
        obs.ROIObservationDescription = 'Type:soft, Rang:*/*, Fill:0, Opacity:0.0, Thickness:1, LineThickness:2'
        obs.ROIObservationLabel = label_pars['label_names'][str(roi_num)]
        obs.RTROIInterpretedType = 'ORGAN'
        obs.ReferencedROINumber = str(roi_num)
        obs.SpecificCharacterSet = 'ISO_IR 100'
        roi_list.append(obs)

    rtss.RTROIObservationsSequence = Sequence(roi_list)

    # ------------------ ReferencedFrameOfReferenceSequence ------------------ 

    frame = Dataset()
    frame.FrameOfReferenceUID = dcm.FrameOfReferenceUID
    study = Dataset()
    study.ReferencedSOPClassUID = '1.2.840.10008.5.1.4.1.1.481.3'
    study.ReferencedSOPInstanceUID = dcm.StudyInstanceUID
    series = Dataset()
    series.SeriesInstanceUID = dcm.SeriesInstanceUID

    image_list = []
    for i in range(0, len(uid_list)):
        image = Dataset()
        image.ReferencedSOPClassUID = dcm.SOPClassUID
        image.ReferencedSOPInstanceUID = uid_list[i]
        image_list.append(image)

    series.ContourImageSequence = Sequence(image_list)
    study.RTReferencedSeriesSequence = Sequence((series,))
    frame.RTReferencedStudySequence = Sequence((study,))
    rtss.ReferencedFrameOfReferenceSequence = Sequence((frame,))

    # ------------------ StructureSetROISequence ------------------ 
    roi_list = []
    for roi_num in range(1, label_pars['num_labels'] + 1):
        roi_item = Dataset()
        roi_item.ROIGenerationAlgorithm = 'AUTOMATIC'
        roi_item.ROIName = label_pars['label_names'][str(roi_num)] # + ' - ver. 0.1'
        roi_item.ROINumber = roi_num
        roi_item.ReferencedFrameOfReferenceUID = dcm.FrameOfReferenceUID
        roi_list.append(roi_item)
    rtss.StructureSetROISequence = Sequence(roi_list)

    # -------------------------------------------------------------

    # save the RTSS file to disk
    rtss.save_as(output_fname, write_like_original=False)

